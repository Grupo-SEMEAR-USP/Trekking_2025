// Generated by gencpp from file navigation/encoders.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_ENCODERS_H
#define NAVIGATION_MESSAGE_ENCODERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct encoders_
{
  typedef encoders_<ContainerAllocator> Type;

  encoders_()
    : encoderTicks()  {
      encoderTicks.assign(0);
  }
  encoders_(const ContainerAllocator& _alloc)
    : encoderTicks()  {
  (void)_alloc;
      encoderTicks.assign(0);
  }



   typedef boost::array<int8_t, 2>  _encoderTicks_type;
  _encoderTicks_type encoderTicks;





  typedef boost::shared_ptr< ::navigation::encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::encoders_<ContainerAllocator> const> ConstPtr;

}; // struct encoders_

typedef ::navigation::encoders_<std::allocator<void> > encoders;

typedef boost::shared_ptr< ::navigation::encoders > encodersPtr;
typedef boost::shared_ptr< ::navigation::encoders const> encodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::encoders_<ContainerAllocator1> & lhs, const ::navigation::encoders_<ContainerAllocator2> & rhs)
{
  return lhs.encoderTicks == rhs.encoderTicks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::encoders_<ContainerAllocator1> & lhs, const ::navigation::encoders_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation::encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab0acfae811ce802d245f0e7acc9b834";
  }

  static const char* value(const ::navigation::encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab0acfae811ce802ULL;
  static const uint64_t static_value2 = 0xd245f0e7acc9b834ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/encoders";
  }

  static const char* value(const ::navigation::encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Mensagem customizada que guarda a quantidade de ticks do encoder de cada roda\n"
"int8[2] encoderTicks #[direita, esquerda]\n"
;
  }

  static const char* value(const ::navigation::encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoderTicks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::encoders_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "encoderTicks: ";
    if (v.encoderTicks.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.encoderTicks.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int8_t>::stream(s, true ? std::string() : indent + "    ", v.encoderTicks[i]);
    }
    if (v.encoderTicks.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_ENCODERS_H
