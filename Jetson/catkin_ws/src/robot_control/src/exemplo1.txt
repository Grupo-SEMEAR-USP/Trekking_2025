#include "initializers.hpp"

int main(){

    i2c_config_t i2c_config = i2c_config_info(BSC_UNIT_1,I2C_SLC_FREQUENCY,GPIO_PULLUP_DISABLE, GPIO_PULLUP_DISABLE);

    i2c_slave_device_config_t slave_config;
        slave_config.tx_buffer_size = I2C_TX_BUFFER_SIZE;
        slave_config.rx_buffer_size = I2C_RX_BUFFER_SIZE;
        slave_config.i2c_slave_adress = I2C_SLAVE_ADRESS;

    bsc_i2c_handle i2c_master;
    i2c_master.i2c_param_config(i2c_config);
    i2c_master.i2c_add_slave_device("espFeliz", slave_config);
    i2c_master.i2c_start_bsc();

    uint8_t val[] = {1,2,3,4,5,6,7,8};
    uint8_t val2[8] = {0,0,0,0,0,0,0,0};

    float left=0;
    float right=0;
    std::chrono::high_resolution_clock::time_point start;
    std::chrono::high_resolution_clock::time_point end;

    i2c_master.i2c_read("espFeliz"); //fill rx buffer for the first time, only for the first reading

    usleep(2000000);

    while (1){
        memcpy(i2c_master.slave_devices["espFeliz"].tx_buffer,val,8);

        i2c_master.wait_bsc_transfer();
        start  = std::chrono::high_resolution_clock::now();
        i2c_master.i2c_write("espFeliz");
        end  = std::chrono::high_resolution_clock::now();
        
        std::cout << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << "[µs]" << std::endl;
        
        // do something
        usleep(2000); //implicit time

        i2c_master.wait_bsc_transfer();
        start  = std::chrono::high_resolution_clock::now();
        if(i2c_master.i2c_read("espFeliz")){
        end  = std::chrono::high_resolution_clock::now();
        std::cout << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << "[µs]" << std::endl;
        memcpy(val2, i2c_master.slave_devices["espFeliz"].rx_buffer,8);
        memcpy(&left, val2,4);
        memcpy(&right, val2+4,4);
        
        //for (int i = 0; i < 8 ;i++){
        //    std::cout<<(int)i2c_master.slave_devices["espFeliz"].rx_buffer[i];
        //}
        //std::cout<<std::endl;
        std::cout<<"left: "<<left<<" right: "<<right;
        std::cout<<std::endl;
        }
        
        // do something
        usleep(2000); //implicit time
        
    }

    return 0;
}