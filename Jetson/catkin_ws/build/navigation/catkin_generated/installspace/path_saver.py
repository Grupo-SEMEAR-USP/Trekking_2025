#!/usr/bin/env python3

import rospy
from nav_msgs.msg import Path
import pickle
import os

class PathSaver:
    def __init__(self):
        rospy.init_node('path_saver', anonymous=True)
        self.path_sub = rospy.Subscriber('/path_planner/local_plan', Path, self.path_callback) #Getting the path generated by teb
        self.path_data = None

        self.relative_path = rospy.get_param("~path", 'src/navigation/paths') #Getting the directory in which we will save the path
        self.save_directory = os.path.abspath(self.relative_path) #Converting to an absolute reference

        self.file_name = rospy.get_param("~file_name", "path.pkl")

        self.alreadySaved = False #Flag that helps us to save the path only once

        if not os.path.exists(self.save_directory):
            os.makedirs(self.save_directory)

    def path_callback(self, msg):
        if not self.alreadySaved:
            self.alreadySaved = True
            self.path_data = msg
            self.save_path_to_disk()

    def save_path_to_disk(self):
        if self.path_data is not None:
            path_filename = os.path.join(self.save_directory, self.file_name)
            with open(path_filename, 'wb') as file:
                pickle.dump(self.path_data, file)
            rospy.loginfo(f"Path data saved to {path_filename}")

if __name__ == '__main__':
    try:
        path_saver = PathSaver()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
